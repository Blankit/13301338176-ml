name: "Unary depth regressor, softmax version: directory input. Center depth values:"

layers {
  name: "data"
  type: IMAGE_DATA
  top: "data"
  top: "label"
  transform_param {
    # (Mean file is same for d16 and d128)
    mean_file: "train/NYUv2/train_full_167_v3/mean.binaryproto"
  } 
  image_data_param {
    new_width: 227
    new_height: 227
    shuffle: 1
    source: "train/NYUv2/train_full_167_v3/index_16_norm_randomized.txt"
    batch_size: 128
  }
  include: { phase: TRAIN }
}

layers {  
  name: "data"
  type: IMAGE_DATA
  top: "data"
  top: "label"
  transform_param {
    mean_file: "train/NYUv2/test_full_167_v3/mean.binaryproto"
  }
  image_data_param {
    new_width: 227
    new_height: 227
    shuffle: 1
    source: "train/NYUv2/test_full_167_v3/index_16_norm_randomized.txt"
    batch_size: 128 
  }
  include: { phase: TEST }
}



### PRE-TRAINED LAYERS ------------------------------------------
layers {
  name: "conv1"
  type: CONVOLUTION
  bottom: "data"
  top: "conv1"
  blobs_lr: 0          # learning rate multiplier for the filters
  blobs_lr: 0          # learning rate multiplier for the biases
  weight_decay: 1      # weight decay multiplier for the filters
  weight_decay: 0      # weight decay multiplier for the biases
  convolution_param {
    num_output: 96     # learn 96 filters
    kernel_size: 11    # each filter is 11x11
    stride: 4          # step 4 pixels between each filter application
    weight_filler {
      type: "gaussian" # initialize the filters from a Gaussian
      std: 0.01        # distribution with stdev 0.01 (default mean: 0)
    }
    bias_filler {
      type: "constant" # initialize the biases to zero (0)
      value: 0
    }
  }
}

layers {
  name: "relu1"
  type: RELU
  bottom: "conv1"
  top: "conv1"
}
layers {
  name: "pool1"
  type: POOLING
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layers {
  name: "norm1"
  type: LRN
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}

layers {
  name: "conv2"
  type: CONVOLUTION
  bottom: "norm1"
  top: "conv2"
  blobs_lr: 0          # learning rate multiplier for the filters
  blobs_lr: 0          # learning rate multiplier for the biases
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "gaussian" # initialize the filters from a Gaussian
      std: 0.01        # distribution with stdev 0.01 (default mean: 0)
    }
    bias_filler {
      type: "constant"
      value: 1.0
    }
  }
}
layers {
  name: "relu2"
  type: RELU
  bottom: "conv2"
  top: "conv2"
}
layers {
  name: "pool2"
  type: POOLING
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layers {
  name: "norm2"
  type: LRN
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}

layers {
  name: "conv3"
  type: CONVOLUTION
  bottom: "norm2"
  top: "conv3"
  blobs_lr: 0          # learning rate multiplier for the filters
  blobs_lr: 0          # learning rate multiplier for the biases
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
  }
}
layers {
  name: "relu3"
  type: RELU
  bottom: "conv3"
  top: "conv3"
}
layers {
  name: "conv4"
  type: CONVOLUTION
  bottom: "conv3"
  top: "conv4"
  blobs_lr: 0          # learning rate multiplier for the filters
  blobs_lr: 0          # learning rate multiplier for the biases
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
  }
}
layers {
  name: "relu4"
  type: RELU
  bottom: "conv4"
  top: "conv4"
}

layers {
  name: "conv5"
  type: CONVOLUTION
  bottom: "conv4"
  top: "conv5"
  blobs_lr: 0          # learning rate multiplier for the filters
  blobs_lr: 0          # learning rate multiplier for the biases  
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
  }
}
layers {
  name: "relu5"
  type: RELU
  bottom: "conv5"
  top: "conv5"
}

layers {
  name: "pool5"
  type: POOLING
  bottom: "conv5"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}



### FULLY-CONNECTED LAYERS ------------------------------------------
layers {
  name: "fc6"
  type: INNER_PRODUCT
  bottom: "pool5"
  top: "fc6"
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  blobs_lr: 0
  blobs_lr: 0
}
layers {
  name: "relu6"
  type: RELU
  bottom: "fc6"
  top: "fc6"
}
layers {
  name: "drop6"
  type: DROPOUT
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layers {
  name: "fc7"
  type: INNER_PRODUCT
  bottom: "fc6"
  top: "fc7"
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }

  blobs_lr: 1
  blobs_lr: 1
}
layers {
  name: "relu7"
  type: RELU
  bottom: "fc7"
  top: "fc7"
}
layers {
  name: "drop7"
  type: DROPOUT
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layers {
  name: "fc_n1"
  type: INNER_PRODUCT
  bottom: "fc7"
  top: "fc_n1"
  inner_product_param {
    num_output: 128
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  blobs_lr: 1
  blobs_lr: 1
}
layers {
  name: "relu_n1"
  type: RELU
  bottom: "fc_n1"
  top: "fc_n1"
}
layers {
  name: "drop_n1"
  type: DROPOUT
  bottom: "fc_n1"
  top: "fc_n1"
  dropout_param {
    dropout_ratio: 0.5
  }

}

layers {
  name: "fc_n2"
  type: INNER_PRODUCT
  bottom: "fc_n1"
  top: "fc_n2"
  inner_product_param {
    num_output: 16
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  blobs_lr: 1
  blobs_lr: 1
}
layers {
  name: "prob"
  type: SOFTMAX_LOSS
  bottom: "fc_n2"
  bottom: "label"
  top: "prob"
}
layers {
  name: "accuracy"
  type: ACCURACY
  bottom: "fc_n2"
  bottom: "label"
  top: "accuracy"
  include: { phase: TEST }
}

